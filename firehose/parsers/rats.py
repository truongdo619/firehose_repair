#!/usr/bin/env python

#   Copyright 2013 David Malcolm <dmalcolm@redhat.com>
#   Copyright 2013 Red Hat, Inc.
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this library; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
#   USA

import sys
import xml.etree.ElementTree as ET

from firehose.model import Message, Function, Point, \
    File, Location, Generator, Metadata, Analysis, Issue, Notes, Failure, \
    CustomFields

# Parser for output from cppcheck:
#   http://sourceforge.net/apps/mediawiki/cppcheck/index.php?title=Main_Page
# specifically, version 2 of its XML format as generated by:
#   cppcheck PATH_TO_SOURCES --xml --xml-version=2

def parse_file(fileobj, sut=None, file_=None, stats=None):
    tree = ET.parse(fileobj)
    root = tree.getroot()
    node_rats = root.find('rats')
    version = "2.4"
    node_errors = root.findall('vulnerability')

    generator = Generator(name='rats',
                          version=version)

    metadata = Metadata(generator, sut, file_, stats)
    analysis = Analysis(metadata, [])

    test_id = 1000
    for node_error in node_errors:
        tmp = node_error.find("type")
        cwe = None
        if tmp is not None:
            cwe = tmp.text
        str_msg = " ".join(node_error.find('message').text.replace("\n", " ").split())
        message = Message(text=str_msg)
        notes = None
        severity = node_error.find('severity').text
        files = node_error.findall("file")

        for file in files:
            file_name = file.find("name").text
            print(file_name)
            lines = file.findall("line")
            for line in lines:
                line_number = line.text

                location = Location(file=File(file_name, None),

                                    # FIXME: doesn't tell us function name
                                    # TODO: can we patch this upstream?
                                    function=None,

                                    # doesn't emit column
                                    point=Point(int(line_number), 0))  # FIXME: bogus column

                issue = Issue(cwe, str(test_id), location, message, notes, None,
                              severity=severity)
                test_id += 1
                analysis.results.append(issue)
    return analysis

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("provide a build log file path as the only argument")
    else:
        with open(sys.argv[1]) as data_file:
            analysis = parse_file(data_file)
            sys.stdout.write(str(analysis.to_xml()))
            sys.stdout.write("\n")
